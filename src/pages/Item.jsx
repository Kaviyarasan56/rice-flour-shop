import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { postOrder, getUserByDevice } from "../api";

export default function Item({ deviceId, registered, setRegistered }) {
  const UNIT_PRICE = 25;

  const [dayChoice, setDayChoice] = useState(null);
  const [slotChoice, setSlotChoice] = useState(null);
  const [showSlotOverlay, setShowSlotOverlay] = useState(false);
  const [quantity, setQuantity] = useState(1);
  const [instructions, setInstructions] = useState("");
  const [confirmVisible, setConfirmVisible] = useState(false);
  const [successVisible, setSuccessVisible] = useState(false);
  const [busy, setBusy] = useState(false);
  const [userRegistered, setUserRegistered] = useState(registered);

  const navigate = useNavigate?.() ?? null;

  useEffect(() => {
    async function check() {
      try {
        if (!deviceId) return;
        const u = await getUserByDevice(deviceId);
        setUserRegistered(!!u);
        if (u) {
          localStorage.setItem("registered", "1");
          setRegistered(true);
        }
      } catch (err) {
        console.warn("getUserByDevice failed:", err);
      }
    }
    check();
  }, [deviceId, setRegistered]);

  const firstOrderUsed = localStorage.getItem("firstDiscountUsed") === "1";
  const qtyDiscount = quantity > 5 ? 10 : 0;
  const regDiscount = userRegistered && !firstOrderUsed ? 10 : 0;
  const subtotal = UNIT_PRICE * quantity;
  const total = Math.max(0, subtotal - qtyDiscount - regDiscount);

  function chooseWhen(choice) {
    setDayChoice(choice);
    setShowSlotOverlay(true);
  }

  function chooseSlot(slot) {
    setSlotChoice(slot);
    setShowSlotOverlay(false);
  }

  async function confirmOrder() {
    if (!dayChoice || !slotChoice) {
      alert("родропро╡рпБ роЪрпЖропрпНродрпБ родрпЗродро┐ропрпБроорпН роирпЗро░родрпНродрпИропрпБроорпН родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН.");
      return;
    }
    setConfirmVisible(false);
    setBusy(true);
    try {
      await postOrder({
        deviceId,
        quantity,
        instructions,
        date: dayChoice,
        slot: slotChoice,
        totalPrice: total,
      });
      if (!firstOrderUsed && userRegistered) {
        localStorage.setItem("firstDiscountUsed", "1");
      }
      setSuccessVisible(true);
      setTimeout(() => {
        goHome();
      }, 5000);
    } catch (err) {
      alert("роЖро░рпНроЯро░рпН роЪро┐роХрпНроХро▓рпН: " + (err.message || err));
    } finally {
      setBusy(false);
    }
  }

  function goBack() {
    if (navigate) navigate(-1);
    else window.location.hash = "#/";
  }
  function goHome() {
    setSuccessVisible(false);
    if (navigate) navigate("/");
    else window.location.hash = "#/";
  }

  const dayLabel =
    dayChoice === "today" ? "роЗройрпНро▒рпБ" : dayChoice === "tomorrow" ? "роиро╛ро│рпИ" : "";

  return (
    <div className="item-page">
      <div className="page-header">
        <button className="back-btn" onClick={goBack}>
          тЖР Back
        </button>
        <h1>роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБроорпН роОройрпНрокродрпИродрпН родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН?</h1>
      </div>

      <div className="item-container">
        {/* Delivery Time */}
        <div className="delivery-section">
          <h3>ЁЯУЕ Delivery Time</h3>
          <div className="time-options">
            <button
              className={`time-btn ${dayChoice === "today" ? "active" : ""}`}
              onClick={() => chooseWhen("today")}
            >
              <span className="time-icon">тШАя╕П</span>
              <span>роЗройрпНро▒рпБ</span>
            </button>
            <button
              className={`time-btn ${dayChoice === "tomorrow" ? "active" : ""}`}
              onClick={() => chooseWhen("tomorrow")}
            >
              <span className="time-icon">ЁЯМЩ</span>
              <span>роиро╛ро│рпИ</span>
            </button>
          </div>
          {dayChoice && slotChoice && (
            <div className="selected-time">
              тЬУ {dayLabel} - {slotChoice === "morning" ? "роХро╛ро▓рпИ" : "рооро╛ро▓рпИ"}
            </div>
          )}
        </div>

        {/* Product */}
        <div className="product-showcase">
          <div className="product-image-container">
            <div className="product-badge">Premium</div>
            <div className="product-image">ЁЯМ╛</div>
            <div className="image-glow" />
          </div>
          <h2 className="product-name">роЕро░ро┐роЪро┐ рооро╛ро╡рпБ</h2>
          <p className="product-description">Fresh, High Quality Rice Flour</p>
        </div>

        {/* Pricing */}
        <div className="pricing-card">
          <div className="price-header">
            <span>Unit Price</span>
            <span className="price-tag">тВ╣{UNIT_PRICE}</span>
          </div>

          <div className="quantity-section">
            <label>роОродрпНродройрпИ ро╡рпЗрогрпНроЯрпБроорпН роОройрпНрокродрпИродрпН родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН:</label>
            <div className="quantity-control">
              <button
                className="qty-btn"
                onClick={() => setQuantity((q) => Math.max(1, q - 1))}
              >
                тИТ
              </button>
              <div className="qty-display">{quantity}</div>
              <button className="qty-btn" onClick={() => setQuantity((q) => q + 1)}>
                +
              </button>
            </div>
          </div>

          <div className="price-breakdown">
            <div className="price-row">
              <span>Subtotal ({quantity})</span>
              <span>тВ╣{subtotal}</span>
            </div>
            {qtyDiscount > 0 && (
              <div className="price-row discount">
                <span>Quantity discount</span>
                <span>-тВ╣{qtyDiscount}</span>
              </div>
            )}
            {regDiscount > 0 && (
              <div className="price-row discount">
                <span>Registration discount</span>
                <span>-тВ╣{regDiscount}</span>
              </div>
            )}
            <div className="price-row total">
              <span>роорпКродрпНродроорпН</span>
              <span>тВ╣{total}</span>
            </div>
          </div>

          <div className="instructions-section">
            <label>роХрпБро▒ро┐рокрпНрокрпБ</label>
            <textarea
              placeholder="роХрпВроЯрпБродро▓рпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН..."
              value={instructions}
              onChange={(e) => setInstructions(e.target.value)}
            />
          </div>

          <button className="order-btn" onClick={() => setConfirmVisible(true)}>
            <span>роЖро░рпНроЯро░рпН роЪрпЖропрпН</span> <span>ЁЯЫТ</span>
          </button>
        </div>
      </div>

      {/* Slot Modal */}
      {showSlotOverlay && (
        <div className="modal-overlay" onClick={() => setShowSlotOverlay(false)}>
          <div className="modal-content slot-modal" onClick={(e) => e.stopPropagation()}>
            <h2>ЁЯХТ роирпЗро░родрпНродрпИродрпН родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН</h2>
            <p className="slot-desc">роЙроЩрпНроХро│рпБроХрпНроХрпБ ро╡ро┐ро░рпБрокрпНрокрооро╛рой роирпЗро░родрпНродрпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН</p>
            <div className="slot-options">
              <button className="slot-btn" onClick={() => chooseSlot("morning")}>
                ЁЯМЕ <strong>роХро╛ро▓рпИ</strong>
                <span className="slot-time">6 AM - 12 PM</span>
              </button>
              <button className="slot-btn" onClick={() => chooseSlot("evening")}>
                ЁЯМЖ <strong>рооро╛ро▓рпИ</strong>
                <span className="slot-time">4 PM - 8 PM</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Confirm Modal */}
      {confirmVisible && (
        <div className="modal-overlay" onClick={() => setConfirmVisible(false)}>
          <div className="modal-content confirm-modal" onClick={(e) => e.stopPropagation()}>
            <div className="confirm-icon">тЭУ</div>
            <h2>роиро┐роЪрпНроЪропрооро╛роХ роЖро░рпНроЯро░рпИ рокродро┐ро╡рпБ роЪрпЖропрпНропро▓ро╛рооро╛?</h2>
            <div className="confirm-details">
              <p><strong>Quantity:</strong> {quantity}</p>
              <p><strong>Total:</strong> тВ╣{total}</p>
              <p><strong>Delivery:</strong> {dayLabel} - {slotChoice === "morning" ? "роХро╛ро▓рпИ" : "рооро╛ро▓рпИ"}</p>
            </div>
            <div className="confirm-actions">
              <button className="btn-cancel" onClick={() => setConfirmVisible(false)}>роЗро▓рпНро▓рпИ</button>
              <button className="btn-confirm" onClick={confirmOrder} disabled={busy}>
                {busy ? "роХро╛родрпНродро┐ро░рпБ..." : "роЖроорпН"}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Success Modal */}
      {successVisible && (
        <div className="modal-overlay" onClick={goHome}>
          <div className="modal-content success-modal" onClick={(e) => e.stopPropagation()}>
            <div className="success-animation"><div className="checkmark">тЬУ</div></div>
            <h2>роЙроЩрпНроХро│рпН роЖро░рпНроЯро░рпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ рокрпЖро▒рокрпНрокроЯрпНроЯродрпБ ЁЯОЙ</h2>
            <p className="success-message">роиройрпНро▒ро┐! ро╡ро┐ро░рпИро╡ро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ ро╡роирпНродрпБ роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпБроорпН.</p>
            <button className="btn-done" onClick={goHome}>роЪро░ро┐</button>
          </div>
        </div>
      )}
    </div>
  );
}
