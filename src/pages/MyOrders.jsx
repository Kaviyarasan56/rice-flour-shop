import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getUserOrders } from "../api";

export default function MyOrders({ deviceId, registered }) {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    // Check if user is registered
    if (!registered) {
      alert("роорпБродро▓ро┐ро▓рпН рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН!");
      navigate("/");
      return;
    }

    loadOrders();
  }, [deviceId, registered, navigate]);

  async function loadOrders() {
    if (!deviceId) {
      setError("Device ID роЗро▓рпНро▓рпИ");
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const data = await getUserOrders(deviceId);
      setOrders(data || []);
      setError("");
    } catch (err) {
      console.error("Failed to load orders:", err);
      setError("роЖро░рпНроЯро░рпНроХро│рпИ роПро▒рпНро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.");
    } finally {
      setLoading(false);
    }
  }

  function getStatusColor(status) {
    switch (status) {
      case "PENDING": return "#ff9800";
      case "PROCESSING": return "#2196f3";
      case "OUT_FOR_DELIVERY": return "#9c27b0";
      case "DELIVERED": return "#4caf50";
      case "CANCELLED": return "#f44336";
      default: return "#999";
    }
  }

  function getStatusText(status) {
    switch (status) {
      case "PENDING": return "роиро┐ро▓рпБро╡рпИропро┐ро▓рпН";
      case "PROCESSING": return "роЪрпЖропро▓ро╛роХрпНроХроорпН";
      case "OUT_FOR_DELIVERY": return "роЯрпЖро▓ро┐ро╡ро░ро┐роХрпНроХрпБ";
      case "DELIVERED": return "ро╡ро┤роЩрпНроХрокрпНрокроЯрпНроЯродрпБ";
      case "CANCELLED": return "ро░родрпНродрпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ";
      default: return status;
    }
  }

  function getPaymentStatusText(status) {
    switch (status) {
      case "PAID": return "роЪрпЖро▓рпБродрпНродрокрпНрокроЯрпНроЯродрпБ";
      case "COD_PENDING": return "COD - роиро┐ро▓рпБро╡рпИропро┐ро▓рпН";
      case "PENDING": return "роиро┐ро▓рпБро╡рпИропро┐ро▓рпН";
      case "FAILED": return "родрпЛро▓рпНро╡ро┐";
      default: return status;
    }
  }

  function formatDate(timestamp) {
    return new Date(timestamp).toLocaleString("ta-IN", {
      day: "2-digit",
      month: "short",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  }

  if (loading) {
    return (
      <div className="my-orders-page">
        <div className="page-header">
          <button className="back-btn" onClick={() => navigate("/")}>
            тЖР Back
          </button>
          <h1>роОройрпН роЖро░рпНроЯро░рпНроХро│рпН</h1>
        </div>
        <div className="loading-container">
          <div className="spinner"></div>
          <p>роПро▒рпНро▒рпБроХро┐ро▒родрпБ...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="my-orders-page">
        <div className="page-header">
          <button className="back-btn" onClick={() => navigate("/")}>
            тЖР Back
          </button>
          <h1>роОройрпН роЖро░рпНроЯро░рпНроХро│рпН</h1>
        </div>
        <div className="empty-state">
          <div className="empty-icon">тЪая╕П</div>
          <h2>{error}</h2>
          <button className="btn-primary" onClick={loadOrders}>
            роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="my-orders-page">
      <div className="page-header">
        <button className="back-btn" onClick={() => navigate("/")}>
          тЖР Back
        </button>
        <h1>роОройрпН роЖро░рпНроЯро░рпНроХро│рпН</h1>
      </div>

      {orders.length === 0 ? (
        <div className="empty-state">
          <div className="empty-icon">ЁЯУж</div>
          <h2>роЖро░рпНроЯро░рпНроХро│рпН роЗро▓рпНро▓рпИ</h2>
          <p>роирпАроЩрпНроХро│рпН роЗройрпНройрпБроорпН роОроирпНрод роЖро░рпНроЯро░рпБроорпН роЪрпЖропрпНропро╡ро┐ро▓рпНро▓рпИ</p>
          <button className="btn-primary" onClick={() => navigate("/item")}>
            роЗрокрпНрокрпЛродрпБ роЖро░рпНроЯро░рпН роЪрпЖропрпНропрпБроЩрпНроХро│рпН
          </button>
        </div>
      ) : (
        <div className="orders-list">
          {orders.map((order) => (
            <div key={order.id} className="order-card">
              <div className="order-header">
                <div>
                  <h3>роЖро░рпНроЯро░рпН #{order.id}</h3>
                  <p className="order-date">{formatDate(order.createdAt)}</p>
                </div>
                <div className="order-price">тВ╣{order.totalPrice}</div>
              </div>

              <div className="order-details">
                <div className="detail-row">
                  <span>роЕро│ро╡рпБ:</span>
                  <strong>{order.quantity} kg</strong>
                </div>
                <div className="detail-row">
                  <span>родрпЗродро┐:</span>
                  <strong>{order.date === 'today' ? 'роЗройрпНро▒рпБ' : 'роиро╛ро│рпИ'}</strong>
                </div>
                <div className="detail-row">
                  <span>роирпЗро░роорпН:</span>
                  <strong>{order.slot === 'morning' ? 'роХро╛ро▓рпИ' : 'рооро╛ро▓рпИ'}</strong>
                </div>
                <div className="detail-row">
                  <span>роиро┐ро▓рпИ:</span>
                  <span 
                    className="status-badge" 
                    style={{ backgroundColor: getStatusColor(order.status) }}
                  >
                    {getStatusText(order.status)}
                  </span>
                </div>
                <div className="detail-row">
                  <span>рокрогроорпН роЪрпЖро▓рпБродрпНродро▓рпН:</span>
                  <strong>{getPaymentStatusText(order.paymentStatus)}</strong>
                </div>
                {order.paymentMethod && (
                  <div className="detail-row">
                    <span>рокрогроорпН роЪрпЖро▓рпБродрпНродрпБроорпН роорпБро▒рпИ:</span>
                    <strong>{order.paymentMethod === 'COD' ? 'ЁЯТ╡ COD' : 'ЁЯУ▒ Online'}</strong>
                  </div>
                )}
                {order.instructions && (
                  <div className="detail-row">
                    <span>роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:</span>
                    <strong>{order.instructions}</strong>
                  </div>
                )}
              </div>

              {/* Order Timeline */}
              <div className="order-timeline">
                <div className={`timeline-step ${order.status !== 'CANCELLED' ? 'completed' : ''}`}>
                  <div className="step-icon">тЬУ</div>
                  <div className="step-content">
                    <h4>роЖро░рпНроЯро░рпН роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ</h4>
                    <p>{formatDate(order.createdAt)}</p>
                  </div>
                </div>

                <div className={`timeline-step ${['PROCESSING', 'OUT_FOR_DELIVERY', 'DELIVERED'].includes(order.status) ? 'completed' : ''}`}>
                  <div className="step-icon">тЪЩя╕П</div>
                  <div className="step-content">
                    <h4>роЪрпЖропро▓ро╛роХрпНроХроорпН</h4>
                    <p>{order.processingAt ? formatDate(order.processingAt) : 'роиро┐ро▓рпБро╡рпИропро┐ро▓рпН'}</p>
                  </div>
                </div>

                <div className={`timeline-step ${['OUT_FOR_DELIVERY', 'DELIVERED'].includes(order.status) ? 'completed' : ''}`}>
                  <div className="step-icon">ЁЯЪЪ</div>
                  <div className="step-content">
                    <h4>роЯрпЖро▓ро┐ро╡ро░ро┐роХрпНроХрпБ</h4>
                    <p>{order.outForDeliveryAt ? formatDate(order.outForDeliveryAt) : 'роиро┐ро▓рпБро╡рпИропро┐ро▓рпН'}</p>
                  </div>
                </div>

                <div className={`timeline-step ${order.status === 'DELIVERED' ? 'completed' : ''} ${order.status === 'CANCELLED' ? 'cancelled' : ''}`}>
                  <div className="step-icon">{order.status === 'CANCELLED' ? 'тЬЧ' : 'тЬУ'}</div>
                  <div className="step-content">
                    <h4>{order.status === 'CANCELLED' ? 'ро░родрпНродрпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ' : 'ро╡ро┤роЩрпНроХрокрпНрокроЯрпНроЯродрпБ'}</h4>
                    <p>
                      {order.status === 'DELIVERED' && order.deliveredAt 
                        ? formatDate(order.deliveredAt) 
                        : order.status === 'CANCELLED' && order.cancelledAt
                        ? formatDate(order.cancelledAt)
                        : 'роиро┐ро▓рпБро╡рпИропро┐ро▓рпН'}
                    </p>
                  </div>
                </div>
              </div>

              {order.statusNote && (
                <div className="status-note">
                  <strong>роХрпБро▒ро┐рокрпНрокрпБ:</strong> {order.statusNote}
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}